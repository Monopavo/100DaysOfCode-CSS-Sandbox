/* Animation Definitions and Classes */
                                    
        /* Rotate */

/* 360 rotation */

.rotate-full {
    animation: rotate-full 3s linear infinite;
}


@keyframes rotate-full {
    from {transform: rotate(0deg);}
    to {transform: rotate(360deg);}
}

/* 4-step rotation */

.rotate-four {
    animation: rotate-four 5s steps(4) infinite;
}


@keyframes rotate-four {
    0% {transform: rotate(0deg)}
    25% {transform: rotate(90deg);}
    50% {transform: rotate(180deg);}
    75% {transform: rotate(270deg);}
    100% {transform: rotate(360deg);}
}


/* Swaying rotation */


@keyframes rotate-teeter {
    0% {transform: rotate(0deg)}
    25% {transform: rotate(30deg);}
    50% {transform: rotate(0deg);}
    75% {transform: rotate(-30deg);}
    100% {transform: rotate(0deg);}
}

        /* Scale */

/* Grow and shrink */

.grow-and-shrink {
    animation: grow-and-shrink 1s alternate infinite;
}


@keyframes grow-and-shrink {
    from {transform: scale(1);}
    to {transform: scale(2);}
}

        /* Translate */

/* Left to right */

.sliding {
    animation: sliding 5s ease infinite;
}


@keyframes sliding {
    0% {transform: translateX(0%);}
    25% {transform: translateX(-230%);}
    50% {transform: translateX(0%);}
    75% {transform: translateX(230%);}
    100% {transform: translateX(0%);}
}

        /* Skew */

/* Basic Skew */


.wonky {
    animation: wonky 2s alternate-reverse infinite;
}


@keyframes wonky {
    0% { transform: skew(0deg, 0deg); }
    25% { transform: skew(30deg, 20deg); }
    50% { transform: skew(0deg, 0deg); }
    75% { transform: skew(-30deg, -20deg); }
    100% { transform: skew(0deg, 0deg); }
}

        /* Colour Shifting */

/* Gradual Switch */


.monocolour-switch {
    animation: monocolour-switch 2s alternate-reverse infinite;
}


@keyframes monocolour-switch {
    from { color: white;}
    to { color: black;}
}











                        /* Layered Animations */




.circle-1-anim {
    animation: circle-1-anim 2s alternate-reverse infinite;
}

@keyframes circle-1-anim {
    from {transform: scale(2); background-color: rgb(177, 177, 177); border-radius: 66%}
    to {transform: scale(4); background-color: rgb(20, 20, 20); border-radius: 20%}
}

.circle-2-anim {
    animation: circle-2-anim 4s alternate-reverse infinite;
}

@keyframes circle-2-anim {
    0% {transform: scale(3); background-color: white; border-radius: 100% 20% 100%;}
    100% {transform: rotate(180deg) scale(1); background-color: grey; border-radius: 20% 100% 20%;}
}

.circle-3-anim {
    animation: circle-3-anim 2s alternate infinite;
}

@keyframes circle-3-anim {
    0% {background-color: white;}
    50% {transform: scale(1.5); background-color: grey;}
    100% {background-color: white;}
}

.circle-4-anim {
    animation: circle-4-anim 2s alternate infinite;
}

@keyframes circle-4-anim {
    from {background-color: rgb(154, 154, 153);}
    to {transform: skew(33deg, 66deg); background-color: rgb(245, 245, 229);}
}

.circle-5-anim {
    animation: circle-5-anim 3s alternate-reverse infinite;
}

@keyframes circle-5-anim {
    from {transform: scale(0.5); border-radius: 0%; background-color: rgb(255, 251, 234);}
    to {transform: rotate(-270deg); border-radius: 0%; background-color: rgb(144, 145, 139);}
}











/* 
==========================================================================================================================================================================

                    ====== Animation Notes =====


================= Transforms =================

Use "@keyframes" followed by the animation's alias in order to define the animation.
Encapsulate the frames of the animation within curly braces by using the "transform" property. 

EXAMPLE:

@keyframes myAnimationName {
    from { transform: translateX(0); }
    to { transform:translateX(100px); }

//OR// 

@keyframes myAnimationName {
    0% { transform: translateX(0); }
    100% { transform: translateX(100px); } 

0% indicates the beginning of the animation, and 100% the end. Any amount of keyframes can be interpolated between them.

Add the animation to the rule with the "animation" shorthand, which consists of...

    animation-name: (Self-explanatory.)
    animation-duration: (The amount of time to complete one animation cycle (in s or ms).)
    animation-timing-function: (Determines the style of easing between keyframes.)
    animation-iteration-count: (How many times the animation is repeated.)

All values within the animation are relative to the starting position of the element; translating 200 pixels to the right, and then translating 200 pixels to the left, will NOT return the element to "0"; it will simply translate 200 pixels to the left of 0.

================= Transform Values =================

transform: rotate(?deg) // Uses degrees. Rotates the element. Positive is clockwise, negative is anticlockwise.

transform: scale(1) // Uses a point-scale, with 1 being the element's base size. Proportionally increases the height and width of the element. 

transform: translate(x, y) // Uses coordinates. Moves ("translates") the element in the specified axis; X-positive is to move right, Y-positive is to move down.  
transform: translate3d(x, y, z) // Same, but with added z-axis; Z-positive is pushing the element away from the viewer. Requires its parent element to have the "perspective" property.
transform: translateX() // Strictly moves the element along the X-axis.
transform: translateY() // Strictly moves the element along the Y-axis.
transform: translateZ() // Strictly moves the element along the Z-axis.

transform: skew(x, y) // Uses degrees. Distorts ("skews") the element along the X and Y axes.
transform: skewX() // Strictly skews the element along the Y-axis.
transform: skewY() // Strictly skews the element along the Y-axis.

================= Timing Function Values =================

alternate // "Loop". Runs through all 0% => 100% keyframes, then back to 0% in one cycle. 
alternate-reverse // "Ping-pong". Runs through all 100% => 0%, then alternates between starting at 0% and 100% for each cycle.

ease // The default; animation starts slow, speeds up, then slows down.

linear // A constant, smooth transition through all frames.

steps(x) // x = total number of keyframes - 1 (basically, excluding 0%). Effectively "pauses" the animation at each frame.

================= Iteration Values =================

Either "infinite" or a set number. Defaults to 1 cycle.

================= Combining Transforms =================

----- Outside of defining different types of transformations within the same animation, animations can be combined through the "animation:" property.

----- The animations need to be separated with commas.

EXAMPLE:

.myClassRule {
    animation:
        myAnimation1 5s ease infinite,
        myAnimation2 4s alternate 5,
        myAnimation3 1s backwards 10,
}

----- All animations retain their individual keyframe timings and iteration counts, allowing for complex layering. 

----- Using multiple "animation:" properties does not work; the last property will overwrite all the others.

EXAMPLE:

.myClass {
    animation: myAnimation1 5s ease infinite,
    animation: myAnimation2 4s alternate 5,
    animation: myAnimation3 1s backwards 10,
}

----- Only the third animation will apply.

----- There can be compatibility issues with the above, so it's best to just define unique animations with all the necessary transforms, transitions, and property changes.

----- For the "transform:" property, this is done by linking all the rotate, translate, scale, and skew values in a single property.

----- Other properties can be chained in the same frame by using a semicolon divisor.

EXAMPLE:

@keyframes myCombinedAnimation {
    0% { transform: scale(1) rotate(0deg); font-size: 14px; color: black; }
    100% { transform: scale(2) rotate(180deg); font-size: 28px; color: red; }
}






================= Transitions =================

WIP WIP WIP






==========================================================================================================================================================================
*/